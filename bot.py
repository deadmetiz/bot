import time
import logging
import asyncio
import requests
import sqlite3 as sl
from yoomoney import Quickpay

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from tkn import TOKEN

print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
bot = Bot(TOKEN, parse_mode="HTML")
loop = asyncio.get_event_loop()
dp = Dispatcher(bot, loop)
HELP = """
–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.

–ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∏–º–µ–µ—Ç—Å—è –≤–æ–π–¥–∏—Ç–µ –≤ –Ω–µ–≥–æ –ø–æ –¥–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–∑—Ü—É.
üîë
/<b>login</b> –í–ê–®_–ü–ê–†–û–õ–¨
üîë
–í–æ–π–¥—è –≤ –∞–∫–∫–∞—É–Ω—Ç, –≤–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É!
"""
HELPLOG = """
<strong>–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</strong>

1. üìä–û—Ç—Å–ª–µ–¥–∏—Ç—å –∫—É—Ä—Å –∫—Ä–∏–ø—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:

2. üíéINVASION FEATURES:

3. üåÄ–¢–æ—Ä–≥–æ–≤–ª—è –∫—Ä–∏–ø—Ç–æ–π –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ:

4. üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç:

5. üè¶–£–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å:

6. üí∏–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:

–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /<b>exit</b>
"""

keygame = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        input_field_placeholder="—Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥—Ä—É–≥—É—é —Å–¥–µ–ª–∫—É?"
    )
keyboardhelp1 = types.ReplyKeyboardMarkup(
            resize_keyboard=True,
            input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–æ–º–∞–Ω–¥—É"
        )
keyboardhelp = types.ReplyKeyboardMarkup(
            resize_keyboard=True,
            input_field_placeholder="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        )
keyboardvalut = types.ReplyKeyboardMarkup(
            resize_keyboard=True,
            input_field_placeholder="–•–æ—Ç–∏—Ç–µ –ø–æ—Ç–æ—Ä–≥–æ–≤–∞—Ç—å?"
        )
keyboardhlp = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        input_field_placeholder="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )
keyboardbalance = types.ReplyKeyboardMarkup(
            resize_keyboard=True,
            input_field_placeholder="–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º"
        )
keyboardfeat = types.ReplyKeyboardMarkup(
            resize_keyboard=True,
            input_field_placeholder="–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤"
        )
keyboardupdown = types.ReplyKeyboardMarkup(
            resize_keyboard=True,
            input_field_placeholder="–∫—É–¥–∞ –ø–æ–π–¥–µ—Ç –∫—É—Ä—Å?"
        )
keyboardchoice = types.ReplyKeyboardMarkup(
            resize_keyboard=True,
            input_field_placeholder="–≤—ã–±–æ—Ä –º–æ–Ω–µ—Ç—ã"
        )
keyboardx = types.ReplyKeyboardMarkup(
            resize_keyboard=True,
            input_field_placeholder="–ø–ª–µ—á–æ —Å–¥–µ–ª–∫–∏"
        )
keyboardyes = types.ReplyKeyboardMarkup(
            resize_keyboard=True,
            input_field_placeholder="–ü–æ–¥—Ç–≤–µ–∂–¥–µ–Ω–∏–µ"
        )
bu = types.KeyboardButton(text="‚úÖ")
bu1 = types.KeyboardButton(text="‚ùå")
keyboardyes.row(bu)
keyboardyes.row(bu1)
ikm = InlineKeyboardMarkup(row_width=2)
close1 = InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É.", callback_data=f"CLOSE")
ikm.add(close1)
ikmda = InlineKeyboardMarkup(row_width=1)
ye = InlineKeyboardButton(text="–î–∞", callback_data="yes")
no = InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no")
ikmda.row(ye)
ikmda.row(no)
butfet0 = types.KeyboardButton(text="1X")
butfet = types.KeyboardButton(text="10X")
butfet1 = types.KeyboardButton(text="20X")
butfet2 = types.KeyboardButton(text="50X")
butbtc = types.KeyboardButton(text="BTC")
buteth = types.KeyboardButton(text="ETH")
butsol = types.KeyboardButton(text="SOL")
buttons1 = types.KeyboardButton(text="üìä–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Çüìä")
buttons2 = types.KeyboardButton(text="üíéINVASION FEATURESüíé")
buttons3 = types.KeyboardButton(text="üåÄ–¢–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µüåÄ")
buttons4 = types.KeyboardButton(text="üè¶–£–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Åüè¶")
buttons5 = types.KeyboardButton(text="üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Çüí≥")
buttons6 = types.KeyboardButton(text="üí∏–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤üí∏")
buttonhelp = types.KeyboardButton(text="üì¢–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥üì¢")
butup = types.KeyboardButton(text="–í–≤–µ—Ä—Ö")
butdown = types.KeyboardButton(text="–í–Ω–∏–∑")
butreg = types.KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.")
keygame.row(buttons3)
keygame.row(buttonhelp)
keyboardhelp1.row(buttons1, buttons2, buttons3)
keyboardhelp1.row(buttons5, buttons4, buttons6)
keyboardhelp.row(butreg)
keyboardvalut.row(buttons2, buttons3)
keyboardvalut.row(buttons1)
keyboardvalut.row(buttonhelp)
keyboardhlp.row(buttonhelp)
keyboardbalance.row(buttons5, buttons6)
keyboardbalance.row(buttonhelp)
keyboardfeat.row(buttons3, buttons5)
keyboardfeat.row(buttonhelp)
keyboardupdown.row(butup)
keyboardupdown.row(butdown)
keyboardchoice.row(butbtc)
keyboardchoice.row(buteth, butsol)
keyboardx.row(butfet0)
keyboardx.row(butfet, butfet1)
keyboardx.row(butfet2)
crypto = dict.fromkeys(['btc', 'eth', 'sol', 'matic', 'near', 'aptos'], '')
cryptoold = dict.fromkeys(['btcold', 'ethold', 'solold', 'maticold', 'nearold', 'aptosold'], '')
abalance = 'balance'
abtc = 'btc'
aeth = 'eth'
asol = 'sol'
amatic = 'matic'
anear = 'near'
aaptos = 'aptos'
abtcold = 'btcold'
aethold = 'ethold'
asolold = 'solold'
amaticold = 'maticold'
anearold = 'nearold'
aaptosold = 'aptosold'

con = sl.connect('logg.db')
cur = con.cursor()

cur.execute("SELECT * FROM userinfo")
result = cur.fetchall()
print(result)


machine = []
aa = 0
for a in result:
    machine.append(dict.fromkeys(['userid', 'currentregister', 'sec', 'userbuy', 'userset', 'xxx', 'crypt', 'updown', 'mymessage', 'pribil', 'balance', 'login', 'pay']))
    machine[aa]['userid'] = result[aa][0]
    machine[aa]['balance'] = result[aa][3]
    machine[aa]['login'] = 0
    machine[aa]['currentregister'] = 0
    aa += 1
for a in machine:
    print(a)


async def find(user):
    for i in range(len(machine)):
        if machine[i]['userid'] == user:
            return i


async def getalll():
    global crypto
    global cryptoold
    cryptoold['btcold'] = crypto['btc']
    cryptoold['solold'] = crypto['sol']
    cryptoold['ethold'] = crypto['eth']
    cryptoold['maticold'] = crypto['matic']
    cryptoold['nearold'] = crypto['near']
    cryptoold['aptosold'] = crypto['aptos']
    r = requests.get('https://api.binance.com/api/v3/ticker/bookTicker')
    a = r.json()
    for i in a:
        if i['symbol'] == 'BTCUSDT':
            crypto['btc'] = i['bidPrice'][:8]
        elif i['symbol'] == 'ETHUSDT':
            crypto['eth'] = i['bidPrice'][:7]
        elif i['symbol'] == 'SOLUSDT':
            crypto['sol'] = i['bidPrice'][:5]
        elif i['symbol'] == 'MATICUSDT':
            crypto['matic'] = i['bidPrice'][:6]
        elif i['symbol'] == 'NEARUSDT':
            crypto['near'] = i['bidPrice'][:5]
        elif i['symbol'] == 'APTUSDT':
            crypto['aptos'] = i['bidPrice'][:7]


async def getall():
    while True:
        await getalll()
        await asyncio.sleep(1)


async def geturl(summ):
    quickpay = Quickpay(
        receiver="g",#–∑–¥–µ—Å—å –ø–∏—Å–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        quickpay_form="shop",
        targets="Donation",
        paymentType="SB",
        sum=summ,
        label="aaaaaaaaaa"
    )
    return quickpay.redirected_url


async def game(info, messageid):
    print(info)
    for i in range(600):
        if info['updown'] == "up":
            info['pribil'] = int(float(info['userset']) * float(info['xxx']) * (float(crypto[info['crypt']]) / float(info['userbuy']) - 1))
        else:
            info['pribil'] = int(float(info['userset']) * float(info['xxx']) * (float(info['userbuy']) / float(crypto[info['crypt']]) - 1))
        await messageid.edit_text(f"–í—ã –∑–∞—à–ª–∏  –Ω–∞  <b>{info['crypt'].upper()} ${info['userbuy']}</b>\n\n"
                                  f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å <b>{info['crypt'].upper()} ${crypto[info['crypt']]}</b>\n\n"
                                  f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{info['pribil']}</b>\n\n"
                                  f"–û—Å—Ç–∞–ª–æ—Å—å <b>{info['sec']}</b> —Å–µ–∫.", reply_markup=ikm)
        info['sec'] -= 1
        if info['currentregister'] == 77:
            break
        await asyncio.sleep(1)
    await getalll()
    await messageid.edit_text("&#60 - - - -")
    await messageid.edit_text("&#60 &#60 - - -")
    await messageid.edit_text("&#60 &#60 &#60 - -")
    await messageid.edit_text("&#60 &#60 &#60 &#60 -")
    await messageid.edit_text("&#60 &#60 &#60 &#60 &#60")
    await messageid.edit_text("–ó–ê–í–ï–†–®–ï–ù–û")
    await messageid.delete()
    if info['updown'] == "up":
        info['pribil'] = int(
            float(info['userset']) * float(info['xxx']) * (float(crypto[info['crypt']]) / float(info['userbuy']) - 1))
    else:
        info['pribil'] = int(
            float(info['userset']) * float(info['xxx']) * (float(info['userbuy']) / float(crypto[info['crypt']]) - 1))
    ke = f"""
    –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {info['pribil']}—Ä.

–¢–µ–ø–µ—Ä—å –Ω–∞ –≤–∞—à–µ–º –¥–µ–º–æ-—Å—á–µ—Ç–µ:
[{info['pribil'] + info['balance']}—Ä.]
–•–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥—Ä—É–≥—É—é —Å–¥–µ–ª–∫—É?
    """
    kelose = f"""
–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {info['pribil']}—Ä.

–¢–µ–ø–µ—Ä—å –Ω–∞ –≤–∞—à–µ–º –¥–µ–º–æ-—Å—á–µ—Ç–µ:
[{info['pribil'] + info['balance']}—Ä.]
–•–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥—Ä—É–≥—É—é —Å–¥–µ–ª–∫—É?
    """
    if info['updown'] == "up":
        if crypto[info['crypt']] > info['userbuy']:
            cur.execute(f"""UPDATE userinfo SET userbalance = {info['pribil'] + info['balance']} WHERE userid={info['userid']}""")
            info['balance'] += info['pribil']
            await bot.send_message(info['userid'], "üìà")
            await bot.send_message(info['userid'], ke, reply_markup=keygame)
        else:
            cur.execute(f"""UPDATE userinfo SET userbalance = {info['pribil'] + info['balance']} WHERE userid={info['userid']}""")
            info['balance'] += info['pribil']
            await bot.send_message(info['userid'], "üìâ")
            await bot.send_message(info['userid'], kelose, reply_markup=keygame)
    else:
        if crypto[info['crypt']] < info['userbuy']:
            cur.execute(f"""UPDATE userinfo SET userbalance = {info['pribil'] + info['balance']} WHERE userid={info['userid']}""")
            info['balance'] += info['pribil']
            await bot.send_message(info['userid'], "üìà")
            await bot.send_message(info['userid'], ke, reply_markup=keygame)
        else:
            cur.execute(f"""UPDATE userinfo SET userbalance = {info['pribil'] + info['balance']} WHERE userid={info['userid']}""")
            info['balance'] += info['pribil']
            await bot.send_message(info['userid'], "üìâ")
            await bot.send_message(info['userid'], kelose, reply_markup=keygame)

    cur.execute(f"""UPDATE userinfo SET currentregister = '0' WHERE userid={info['userid']}""")
    cur.execute(f"""UPDATE userinfo SET userbuy = '0' WHERE userid={info['userid']}""")
    cur.execute(f"""UPDATE userinfo SET updown = '0' WHERE userid={info['userid']}""")
    cur.execute(f"""UPDATE userinfo SET userset = '0' WHERE userid={info['userid']}""")
    cur.execute(f"""UPDATE userinfo SET crypt = '0' WHERE userid={info['userid']}""")
    cur.execute(f"""UPDATE userinfo SET close = '0' WHERE userid={info['userid']}""")
    info['currentregister'] = 0
    con.commit()


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    infom = await find(message.from_user.id)
    if infom == None:
        cur.execute(f"""INSERT INTO userinfo VALUES({message.from_user.id}, '0', '0', '100000', '0', '0', '0', '0', '0', '0', '0', '0')""")
        con.commit()
        machine.append(dict.fromkeys(['userid', 'currentregister', 'sec', 'userbuy', 'userset', 'xxx', 'crypt', 'updown', 'mymessage', 'pribil', 'balance', 'login', 'pay']))
        machine[-1]['userid'] = message.from_user.id
        machine[-1]['balance'] = 100000
        machine[-1]['login'] = 0
        await message.answer("üì£<b>CRYPTO INVASION –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í–∞—Å!</b>üì£\n–î–ª—è –ø–æ–º–æ—â–∏ —Å —Ä–∞–±–æ—Ç–æ–π –Ω–∞—à–µ–π –±–∏—Ä–∂–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ <b>—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥!</b>", reply_markup=keyboardhlp)
        await message.delete()
    else:
        await message.answer("–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", reply_markup=keyboardhlp)
        await message.delete()
    con.commit()


@dp.message_handler(text="üì¢–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥üì¢")
async def help_handler(message: types.Message):
    if machine[await find(message.from_user.id)]['login'] == 1:
        await message.answer(HELPLOG, reply_markup=keyboardhelp1)
    else:
        await message.answer(HELP, reply_markup=keyboardhelp)
    await message.delete()


@dp.message_handler(text="üìä–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Çüìä")
async def price_handler(message: types.Message):
    if machine[await find(message.from_user.id)]['login'] == 1:
        price = f'<strong>üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –º–æ–Ω–µ—Ç üìä\n\n' \
                f'BTC ${crypto[abtc]} &#60 &#60 ${cryptoold[abtcold]}\n\n' \
                f'ETH ${crypto[aeth]} &#60 &#60 ${cryptoold[aethold]}\n\n' \
                f'SOL ${crypto[asol]} &#60 &#60 ${cryptoold[asolold]}\n\n' \
                f'MATIC ${crypto[amatic]} &#60 &#60 ${cryptoold[amaticold]}\n\n' \
                f'NEAR ${crypto[anear]} &#60 &#60 ${cryptoold[anearold]}\n\n' \
                f'APTOS ${crypto[aaptos]} &#60 &#60 ${cryptoold[aaptosold]}</strong>'
        await message.answer(price, reply_markup=keyboardvalut)
        await message.delete()
    else:
        await message.answer("–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ! –í–æ–π–¥–∏—Ç–µ –ø–æ–¥ —Å–≤–æ–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.")
        await message.delete()


@dp.message_handler(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.")
async def register_handler(message: types.Message):
    cur.execute(f"SELECT userpassword FROM userinfo WHERE userid = {message.from_user.id}")
    reg = cur.fetchone()
    if reg[0] != '0':
        await message.answer("<b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\nüóù–í–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /login <strong>–í–ê–®_–ü–ê–†–û–õ–¨</strong>", reply_markup=types.ReplyKeyboardRemove())
    else:
        machine[await find(message.from_user.id)]['currentregister'] = 1
        sql = f"""UPDATE userinfo SET currentregister = '1' WHERE userid = {message.from_user.id}"""
        cur.execute(sql)
        con.commit()
        await message.answer("‚úèÔ∏è–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –í–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –õ–æ–≥–∏–Ω–æ–º –±—É–¥–µ—Ç —Å–ª—É–∂–∏—Ç—å –í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=types.ReplyKeyboardRemove())
    await message.delete()
    con.commit()


@dp.message_handler(commands=['login'])
async def login_handler(message: types.Message):
    print(machine[await find(message.from_user.id)])
    if machine[await find(message.from_user.id)]['login'] == 0:
        f = message.get_args()
        cur.execute(f"SELECT * FROM userinfo WHERE userid = {message.from_user.id}")
        log = cur.fetchone()
        if f == log[1]:
            machine[await find(message.from_user.id)]['login'] = 1
            sql = f"""UPDATE userinfo SET useraccess = '1' WHERE userid = {message.from_user.id}"""
            cur.execute(sql)
            con.commit()
            await message.answer("<b>‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!</b>\n\n–í–≤–µ–¥–∏—Ç–µ /<b>help</b>, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –í–∞—Å –∫–æ–º–∞–Ω–¥—ã.", reply_markup=keyboardhlp)
        else:
            await message.answer("<b>‚õîÔ∏è–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –Ω–∞—à—É —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É: t.me/deadmetiz</b>")
    else:
        await message.answer("<b>–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</b>\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /<b>exit</b>", reply_markup=keyboardhlp)
    await message.delete()
    con.commit()


@dp.message_handler(commands=['exit'])
async def exit_handler(message: types.Message):
    sql = f"""UPDATE userinfo SET useraccess = '0' WHERE userid = {message.from_user.id}"""
    cur.execute(sql)
    con.commit()
    machine[await find(message.from_user.id)]['login'] = 0
    await message.answer("<b>–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.</b>", reply_markup=keyboardhlp)


@dp.message_handler(text="üè¶–£–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Åüè¶")
async def balance_handler(message: types.Message):
    if machine[await find(message.from_user.id)]['login'] == 1:
        await message.answer(f'–ù–∞ –≤–∞—à–µ–º –¥–µ–º–æ-—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–µ <b>[{machine[await find(message.from_user.id)][abalance]}—Ä.]</b>\n–ù–∞ –≤–∞—à–µ–º —Ä–µ–∞–ª—å–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ <b>[0—Ä.]</b>', reply_markup=keyboardbalance)
    else:
        await message.answer("–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ! –í–æ–π–¥–∏—Ç–µ –ø–æ–¥ —Å–≤–æ–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.")
    await message.delete()
    con.commit()


@dp.message_handler(text="üíéINVASION FEATURESüíé")
async def trd_handler(message: types.Message):
    if machine[await find(message.from_user.id)]['login'] == 1:
        await message.answer("‚ö†Ô∏è<b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!</b>‚ö†Ô∏è", reply_markup=keyboardfeat)
    else:
        await message.answer("–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ!")
    await message.delete()


@dp.message_handler(text="üåÄ–¢–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µüåÄ")
async def trade_handler(message: types.Message):
    if machine[await find(message.from_user.id)]['login'] == 1 and machine[await find(message.from_user.id)]['currentregister'] == 0:
        machine[await find(message.from_user.id)]['currentregister'] = 2
        cur.execute(f"UPDATE userinfo SET currentregister = '2' WHERE userid = {message.from_user.id}")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è —Å–¥–µ–ª–∫–∏:\n–í <b>–¥–∞–Ω–Ω—ã–π</b> –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã BTC, ETH, SOL.", reply_markup=keyboardchoice)
    else:
        await message.answer("–í—ã —É–∂–µ —Ç–æ—Ä–≥—É–µ—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –≤–∞—à–∞ —Å–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è")
    await message.delete()
    con.commit()


@dp.message_handler(text="üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Çüí≥")
async def money_handler(message: types.Message):
    if machine[await find(message.from_user.id)]['login'] == 1 and machine[await find(message.from_user.id)]['currentregister'] == 0:
        machine[await find(message.from_user.id)]['currentregister'] = 15
        await message.answer(f"–ù–∞ <b>–í–∞—à–µ–º</b> –±–∞–ª–∞–Ω—Å–µ:\n"
                             f"<b>[0—Ä.]</b>\n"
                             f"–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è <b>–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ 700—Ä.</b>\n"
                             f"–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–∏—Å–ª–æ–º.", reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer(f"–ü–æ–∫–∞ —á—Ç–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", reply_markup=keyboardhlp)


@dp.callback_query_handler()
async def close_handler(callback: types.callback_query):
    if callback.data == 'CLOSE':
        await callback.answer("–í—ã –∑–∞–∫—Ä—ã–ª–∏ —Å–¥–µ–ª–∫—É!")
        machine[await find(callback.from_user.id)]['currentregister'] = 77
        cur.execute(f"""UPDATE userinfo SET close = 1 WHERE userid = {callback.from_user.id}""")
        con.commit()
    elif callback.data == "yes":
        ikmpop = InlineKeyboardMarkup(row_width=1)
        yes = InlineKeyboardButton(text="üí∏–û–ü–õ–ê–¢–êüí∏", url=f"{await geturl(machine[await find(callback.from_user.id)]['userset'])}")
        no = InlineKeyboardButton(text="‚ùå–û–¢–ö–ê–ó‚ùå", callback_data="no")
        ikmpop.row(yes)
        ikmpop.row(no)
        await machine[await find(callback.from_user.id)]['pay'].edit_text(f"<b>–ö –û–ü–õ–ê–¢–ï:</b>\n"
                                                                          f"<b>{machine[await find(callback.from_user.id)]['userset']}—Ä.</b>", reply_markup=ikmpop)
    elif callback.data == "no":
        machine[await find(callback.from_user.id)]['currentregister'] = 0
        await machine[await find(callback.from_user.id)]['pay'].delete()
        await bot.send_message(callback.from_user.id, "–í—ã <b>–æ—Ç–∫–∞–∑–∞–ª–∏—Å—å</b> –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.", reply_markup=keyboardhlp)
        await callback.answer("–û—Ç–∫–∞–∑")


@dp.message_handler()
async def log_handler(message: types.Message):
    if machine[await find(message.from_user.id)]['currentregister'] == 1:
        if ' ' in message.text or len(message.text) <= 5:
            await message.answer('–í–∞—à –ø–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ª–∏–±–æ –≤ –Ω–µ–º —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –ø—Ä–æ–±–µ–ª—ã.\n<b>–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å.</b>')
        else:
            machine[await find(message.from_user.id)]['currentregister'] = 0
            sql = f"""UPDATE userinfo SET userpassword = '{message.text}' WHERE userid = {message.from_user.id}"""
            cur.execute(sql)
            sql = f"""UPDATE userinfo SET currentregister = '0' WHERE userid = {message.from_user.id}"""
            cur.execute(sql)
            await message.answer(f'–í–æ—Ç –í–∞—à –ø–∞—Ä–æ–ª—å: {message.text}\n–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É\n\n/<b>login</b> –í–ê–®_–ü–ê–†–û–õ–¨\n\n–ò–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç <strong>–¢–û–õ–¨–ö–û</strong> —á–µ—Ä–µ–∑ –Ω–∞—à—É —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.')
    elif machine[await find(message.from_user.id)]['currentregister'] == 15:
        if message.text.isdigit():
            if int(message.text) >= 700 and int(message.text) <= 25000:
                machine[await find(message.from_user.id)]['userset'] = int(message.text)
                machine[await find(message.from_user.id)]['pay'] = await message.answer(f'–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n'
                                                                                        f'{message.text}—Ä.\n'
                                                                                        f'–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?', reply_markup=ikmda)
            else:
                await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 700—Ä.")
        else:
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –±—É–∫–≤")
    elif machine[await find(message.from_user.id)]['currentregister'] == 2:
        if message.text == 'BTC':
            machine[await find(message.from_user.id)]['currentregister'] = 3
            cur.execute(f"""UPDATE userinfo SET crypt = '{abtc}' WHERE userid = {message.from_user.id}""")
            await message.answer(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC: <b>${crypto[abtc]}</b>\n\n–ö—É—Ä—Å BTC 1 —Å–µ–∫. –Ω–∞–∑–∞–¥: <b>${cryptoold[abtcold]}</b>\n\n–°–∫–∞–∂–∏—Ç–µ, –∫—É–¥–∞ –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é –ø–æ–π–¥–µ—Ç –∫—É—Ä—Å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É?", reply_markup=keyboardupdown)
            cur.execute(f"""UPDATE userinfo SET currentregister = '3' WHERE userid = {message.from_user.id}""")
            machine[await find(message.from_user.id)]['crypt'] = 'btc'
        elif message.text == 'SOL':
            machine[await find(message.from_user.id)]['currentregister'] = 3
            cur.execute(f"""UPDATE userinfo SET crypt = '{asol}' WHERE userid = {message.from_user.id}""")
            await message.answer(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å SOL: <b>${crypto[asol]}</b>\n\n–ö—É—Ä—Å SOL 1 —Å–µ–∫. –Ω–∞–∑–∞–¥: <b>${cryptoold[asolold]}</b>\n\n–°–∫–∞–∂–∏—Ç–µ, –∫—É–¥–∞ –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é –ø–æ–π–¥–µ—Ç –∫—É—Ä—Å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É?", reply_markup=keyboardupdown)
            cur.execute(f"""UPDATE userinfo SET currentregister = '3' WHERE userid = {message.from_user.id}""")
            machine[await find(message.from_user.id)]['crypt'] = 'sol'
        elif message.text == 'ETH':
            machine[await find(message.from_user.id)]['currentregister'] = 3
            cur.execute(f"""UPDATE userinfo SET crypt = '{aeth}' WHERE userid = {message.from_user.id}""")
            await message.answer(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å ETH: <b>${crypto[aeth]}</b>\n\n–ö—É—Ä—Å ETH 1 —Å–µ–∫. –Ω–∞–∑–∞–¥: <b>${cryptoold[aethold]}</b>\n\n–°–∫–∞–∂–∏—Ç–µ, –∫—É–¥–∞ –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é –ø–æ–π–¥–µ—Ç –∫—É—Ä—Å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É?", reply_markup=keyboardupdown)
            cur.execute(f"""UPDATE userinfo SET currentregister = '3' WHERE userid = {message.from_user.id}""")
            machine[await find(message.from_user.id)]['crypt'] = 'eth'
        else:
            await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞")

    elif machine[await find(message.from_user.id)]['currentregister'] == 3:
        if message.text == "–í–≤–µ—Ä—Ö":
            machine[await find(message.from_user.id)]['currentregister'] = 4
            cur.execute(f"""UPDATE userinfo SET currentregister = '4' WHERE userid = {message.from_user.id}""")
            cur.execute(f"""UPDATE userinfo SET updown = "up" WHERE userid = {message.from_user.id}""")
            machine[await find(message.from_user.id)]['updown'] = 'up'
            await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ—á–æ —Å–¥–µ–ª–∫–∏. –û—Ç –Ω–µ–≥–æ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –≤–∞—à–∞ –ø—Ä–∏–±—ã–ª—å!", reply_markup=keyboardx)
        elif message.text == "–í–Ω–∏–∑":
            machine[await find(message.from_user.id)]['currentregister'] = 4
            cur.execute(f"""UPDATE userinfo SET currentregister = '4' WHERE userid = {message.from_user.id}""")
            cur.execute(f"""UPDATE userinfo SET updown = "down" WHERE userid = {message.from_user.id}""")
            await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ—á–æ —Å–¥–µ–ª–∫–∏. –û—Ç –Ω–µ–≥–æ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –≤–∞—à–∞ –ø—Ä–∏–±—ã–ª—å!", reply_markup=keyboardx)
            machine[await find(message.from_user.id)]['updown'] = 'down'
        else:
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!")
    elif machine[await find(message.from_user.id)]['currentregister'] == 4:
        if message.text == "1X":
            machine[await find(message.from_user.id)]['currentregister'] = 5
            cur.execute(f"""UPDATE userinfo SET xxx = '1' WHERE userid = {message.from_user.id}""")
            cur.execute(f"""UPDATE userinfo SET currentregister = '5' WHERE userid = {message.from_user.id}""")
            machine[await find(message.from_user.id)]['xxx'] = 1
            sumsd = f"–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Å—É–º–º–æ–π —Å–¥–µ–ª–∫–∏.\n–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –æ—Ç 100\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {machine[await find(message.from_user.id)]['balance']}"
            await message.answer(sumsd, reply_markup=types.ReplyKeyboardRemove())
        elif message.text == "10X":
            machine[await find(message.from_user.id)]['currentregister'] = 5
            cur.execute(f"""UPDATE userinfo SET xxx = '10' WHERE userid = {message.from_user.id}""")
            cur.execute(f"""UPDATE userinfo SET currentregister = '5' WHERE userid = {message.from_user.id}""")
            machine[await find(message.from_user.id)]['xxx'] = 10
            sumsd = f"–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Å—É–º–º–æ–π —Å–¥–µ–ª–∫–∏.\n–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –æ—Ç 100\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {machine[await find(message.from_user.id)]['balance']}"
            await message.answer(sumsd, reply_markup=types.ReplyKeyboardRemove())
        elif message.text == "20X":
            machine[await find(message.from_user.id)]['currentregister'] = 5
            cur.execute(f"""UPDATE userinfo SET xxx = '20' WHERE userid = {message.from_user.id}""")
            cur.execute(f"""UPDATE userinfo SET currentregister = '5' WHERE userid = {message.from_user.id}""")
            machine[await find(message.from_user.id)]['xxx'] = 20
            sumsd = f"–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Å—É–º–º–æ–π —Å–¥–µ–ª–∫–∏.\n–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –æ—Ç 100\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {machine[await find(message.from_user.id)]['balance']}"
            await message.answer(sumsd, reply_markup=types.ReplyKeyboardRemove())
        elif message.text == "50X":
            machine[await find(message.from_user.id)]['currentregister'] = 5
            cur.execute(f"""UPDATE userinfo SET xxx = '50' WHERE userid = {message.from_user.id}""")
            cur.execute(f"""UPDATE userinfo SET currentregister = '5' WHERE userid = {message.from_user.id}""")
            machine[await find(message.from_user.id)]['xxx'] = 50
            sumsd = f"–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Å—É–º–º–æ–π —Å–¥–µ–ª–∫–∏.\n–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –æ—Ç 100\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {machine[await find(message.from_user.id)]['balance']}"
            await message.answer(sumsd, reply_markup=types.ReplyKeyboardRemove())
        else:
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
    elif machine[await find(message.from_user.id)]['currentregister'] == 5:
        if int(message.text) > machine[await find(message.from_user.id)]['balance'] or int(message.text) < 100:
            await message.answer("–í—ã –≤–≤–µ–ª–∏ —Å—É–º–º—É –º–µ–Ω—å—à–µ 100—Ä., –ª–∏–±–æ –∂–µ –í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤!")
        else:
            machine[await find(message.from_user.id)]['currentregister'] = 6
            cur.execute(f"""UPDATE userinfo SET currentregister = '6' WHERE userid = {message.from_user.id}""")
            cur.execute(f"""UPDATE userinfo SET userset = {int(message.text)} WHERE userid = {message.from_user.id}""")
            machine[await find(message.from_user.id)]['userset'] = int(message.text)
            await message.answer(f"<b>–°–¥–µ–ª–∫–∞: {machine[await find(message.from_user.id)]['crypt'].upper()} {int(message.text)}—Ä. {machine[await find(message.from_user.id)]['updown'].upper()}</b>\n–ü–ª–µ—á–æ —Å–¥–µ–ª–∫–∏: <b>{machine[await find(message.from_user.id)]['xxx']}X</b>\n\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å <b>{crypto[machine[await find(message.from_user.id)]['crypt']]}</b>\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–¥–µ–ª–∫—É.", reply_markup=keyboardyes)
    elif machine[await find(message.from_user.id)]['currentregister'] == 6:
        if message.text == "‚úÖ":
            await getalll()
            cur.execute(f"""UPDATE userinfo SET userbuy = {(crypto[machine[await find(message.from_user.id)]['crypt']])} WHERE userid = {message.from_user.id}""")
            machine[await find(message.from_user.id)]['userbuy'] = crypto[machine[await find(message.from_user.id)]['crypt']]
            cur.execute(f"""UPDATE userinfo SET sec = '600' WHERE userid={message.from_user.id}""")
            machine[await find(message.from_user.id)]['sec'] = 600
            cur.execute(f"""UPDATE userinfo SET close = '0' WHERE userid={message.from_user.id}""")
            machine[await find(message.from_user.id)]['mymessage'] = await bot.send_message(message.from_user.id, "–°–¥–µ–ª–∫–∞.")
            await message.answer("<b>–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏!</b>", reply_markup=types.ReplyKeyboardRemove())
            await game(machine[await find(message.from_user.id)], machine[await find(message.from_user.id)]['mymessage'])
        else:
            machine[await find(message.from_user.id)]['currentregister'] = 0
            cur.execute(f"""UPDATE userinfo SET currentregister = '0' WHERE userid = {message.from_user.id}""")
            cur.execute(f"""UPDATE userinfo SET userset = 0 WHERE userid = {message.from_user.id}""")
            cur.execute(f"""UPDATE userinfo SET updown = '0' WHERE userid = {message.from_user.id}""")
            await message.answer("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–¥–µ–ª–∫–∏!", reply_markup=keyboardhelp1)
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
    await message.delete()
    con.commit()


if __name__ == '__main__':
    dp.loop.create_task(getall())
    executor.start_polling(dp, skip_updates=True)
